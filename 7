#importing libraries
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
import tensorflow.keras as keras
import numpy as np

# Load the dataset and divide into train and test
dataset = keras.datasets.mnist
class_names = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']
(x_train, y_train), (x_test, y_test) = dataset.load_data()

# Reshape and normalize the dataset
x_train = x_train.reshape((x_train.shape[0], x_train.shape[1], x_train.shape[2], 1)) / 255.0
x_test = x_test.reshape((x_test.shape[0], x_test.shape[1], x_test.shape[2], 1)) / 255.0

# Display some examples from the dataset
plt.figure(figsize=(10, 10))
for i in range(9):
    plt.subplot(3, 3, i + 1)
    plt.imshow(x_train[i], cmap='gray')
    plt.title(class_names[y_train[i]])
    plt.axis("off")
plt.show()

# Build the CNN model
model = keras.models.Sequential([
    keras.layers.Conv2D(64, (3, 3), input_shape=(28, 28, 1), activation="relu"),
    keras.layers.MaxPool2D(pool_size=(2, 2), strides=1),
    keras.layers.Conv2D(64, (3, 3), activation="relu"),
    keras.layers.MaxPool2D(pool_size=(2, 2), strides=1),
    keras.layers.Flatten(),
    keras.layers.Dense(64, activation="relu"),
    keras.layers.Dense(10, activation="softmax")
])

model.compile(optimizer="adam", loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=["accuracy"])

# Train the model
model.fit(x_train, y_train, epochs=5, callbacks=[keras.callbacks.EarlyStopping(patience=2)])

# Evaluate the model
model.evaluate(x_test, y_test)

# Make a prediction
sample_img = x_test[0]
plt.imshow(sample_img.squeeze(), cmap='gray')
plt.show()

img = np.expand_dims(sample_img, axis=0)
pred = model.predict(img)
print(f"Predicted: {class_names[np.argmax(pred)]}\nActual: {class_names[y_test[0]]}")

model.summary()
