#!pip install opencv-python
# Load the libraries
import cv2
import matplotlib.pyplot as plt
import numpy as np

# Uploading an image
img = cv2.imread('puppy.jpg')
plt.axis("off")
plt.title("Original Image")
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.show()

# Compute the histogram and plot
histogram = cv2.calcHist([img], [0], None, [256], [0, 256])
plt.plot(histogram, color='black')
plt.xlabel('Pixel Intensity')
plt.ylabel('Frequency')
plt.title('Histogram of Pixel Intensity Values')
plt.grid(True)
plt.show()

# Convert RGB to gray
gray_image = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
plt.imshow(gray_image)
plt.axis("off")

# Resizing the image
resized_img = cv2.resize(src=img, dsize=(920, 650), interpolation=cv2.INTER_CUBIC)
plt.imshow(resized_img)

# Displaying the Blurred Image
gaussian_image = cv2.GaussianBlur(resized_img, (15, 15), 0)
plt.imshow(gaussian_image)

# Edge detection using Canny
edge = cv2.Canny(resized_img, 100, 200)
plt.imshow(edge)

# Adjusting brightness
brightness = cv2.addWeighted(resized_img, 1.2, resized_img, 0, 70)
plt.imshow(brightness)

def sharpen_image(image):
    kernel = np.array([[-1, -1, -1], [-1, 9, -1], [-1, -1, -1]])
    return cv2.filter2D(image, -1, kernel)

sharpened_image = sharpen_image(resized_img)
plt.imshow(sharpened_image)

original_and_sharpened_image = np.hstack((resized_img, sharpened_image))
plt.figure(figsize=[30, 30])
plt.axis('off')
plt.imshow(original_and_sharpened_image[:, :, ::-1])

# Data Augmentation
from tensorflow.keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img

input_dir = 'data'
datagen = ImageDataGenerator(
    rotation_range=20, 
    width_shift_range=0.1, 
    height_shift_range=0.1, 
    shear_range=0.2, 
    zoom_range=0.2, 
    horizontal_flip=True, 
    vertical_flip=True, 
    fill_mode='nearest'
)

img = load_img('bird.png')
x = img_to_array(img)
x = np.expand_dims(x, axis=0)

num_images = 10
augmented_images = []

for i, batch in enumerate(datagen.flow(x, batch_size=1)):
    augmented_images.append(array_to_img(batch[0]))
    if i >= num_images - 1:
        break

plt.figure(figsize=(15, 6))
plt.subplot(1, num_images + 1, 1)
plt.imshow(img)
plt.title('Original Image')
plt.axis('off')

for i in range(num_images):
    plt.subplot(1, num_images + 1, i + 2)
    plt.imshow(augmented_images[i])
    plt.title(f'Augmented Image {i + 1}')
    plt.axis('off')

plt.tight_layout()
plt.show()

# Histogram Equalization
from skimage import io, exposure
input_image = io.imread('puppy.jpg', as_gray=True)
equalized_image = exposure.equalize_hist(input_image)

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.imshow(input_image, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(equalized_image, cmap='gray')
plt.title('Histogram Equalized Image')
plt.axis('off')

plt.tight_layout()
plt.show()

# Morphological Operations (Erosion)
kernel = np.ones((5, 5), np.uint8)
eroded_image = cv2.erode(gray_image, kernel, iterations=1)
plt.subplot(2, 3, 6)
plt.imshow(eroded_image, cmap='gray')
plt.title('Morphological Operations (Erosion)')
plt.axis('off')

# Thresholding
from skimage import filters
thresh_value = filters.threshold_otsu(gray_image)
binary_image = gray_image > thresh_value
plt.subplot(2, 3, 3)
plt.imshow(binary_image, cmap='gray')
plt.title('Thresholding')
plt.axis('off')
