#import library
import tensorflow as tf
import numpy as np
from tensorflow.keras.datasets import cifar10
from sklearn.preprocessing import OneHotEncoder
import matplotlib.pyplot as plt

# Load the CIFAR-10 dataset
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

# Define the class names for easier interpretation of predictions
cifar_10_classes = ["Airplane", "Automobile", "Bird", "Cat", "Deer", "Dog", "Frog", "Horse", "Ship", "Truck"]

# Display an example image from the dataset
plt.imshow(x_train[0])
plt.title(cifar_10_classes[y_train[0][0]])
plt.axis("off")
plt.show()

# Normalize the pixel values to be between 0 and 1
x_train = x_train / 255.0
x_test = x_test / 255.0

# Convert the class labels to one-hot encoded vectors
one_hot_encoder = OneHotEncoder()
y_train = one_hot_encoder.fit_transform(y_train).toarray()
y_test = one_hot_encoder.transform(y_test).toarray()

# Build the softmax model
softmax_model = tf.keras.models.Sequential([
    tf.keras.layers.Flatten(input_shape=(32, 32, 3)),
    tf.keras.layers.Dense(10, activation='softmax')
])

softmax_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model for 20 epochs with a batch size of 64, using a validation split for evaluation
softmax_model.fit(x_train, y_train, epochs=20, batch_size=64, validation_data=(x_test, y_test))

# Make a prediction using the trained model
new_image = x_test[10]
plt.imshow(new_image)
plt.axis("off")
plt.show()

img = np.expand_dims(new_image, axis=0)
pred = softmax_model.predict(img)
prediction = np.argmax(pred)
print("Prediction:", cifar_10_classes[prediction])
