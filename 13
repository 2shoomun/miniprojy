# Import libraries
import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, LSTM, Embedding, Dense

# Example dataset (simplified)
questions = ["What is your name?", "How are you?", "What are you doing?"]
answers = ["My name is Chatbot.", "I am fine.", "I am chatting with you."]

# Tokenize the sentences
tokenizer = Tokenizer()
tokenizer.fit_on_texts(questions + answers)
VOCAB_SIZE = len(tokenizer.word_index) + 1

# Convert sentences to sequences
question_sequences = tokenizer.texts_to_sequences(questions)
answer_sequences = tokenizer.texts_to_sequences(answers)

# Pad the sequences
maxlen_questions = max([len(seq) for seq in question_sequences])
maxlen_answers = max([len(seq) for seq in answer_sequences])
padded_questions = pad_sequences(question_sequences, maxlen=maxlen_questions, padding='post')
padded_answers = pad_sequences(answer_sequences, maxlen=maxlen_answers, padding='post')

# Build the seq2seq model
encoder_inputs = Input(shape=(maxlen_questions,))
encoder_embedding = Embedding(VOCAB_SIZE, 64, mask_zero=True)(encoder_inputs)
encoder_outputs, state_h, state_c = LSTM(64, return_state=True)(encoder_embedding)

decoder_inputs = Input(shape=(maxlen_answers,))
decoder_embedding = Embedding(VOCAB_SIZE, 64, mask_zero=True)(decoder_inputs)
decoder_lstm = LSTM(64, return_sequences=True, return_state=True)
decoder_outputs, _, _ = decoder_lstm(decoder_embedding, initial_state=[state_h, state_c])
decoder_dense = Dense(VOCAB_SIZE, activation='softmax')
output = decoder_dense(decoder_outputs)

model = Model([encoder_inputs, decoder_inputs], output)
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy')
model.summary()

# Train the model
decoder_output_data = np.expand_dims(padded_answers, -1)
model.fit([padded_questions, padded_answers], decoder_output_data, batch_size=32, epochs=100)

# Inference models for generating responses
encoder_model = Model(encoder_inputs, [state_h, state_c])
decoder_state_input_h = Input(shape=(64,))
decoder_state_input_c = Input(shape=(64,))
decoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]
decoder_outputs, state_h, state_c = decoder_lstm(
    decoder_embedding, initial_state=decoder_states_inputs)
decoder_states = [state_h, state_c]
decoder_outputs = decoder_dense(decoder_outputs)
decoder_model = Model([decoder_inputs] + decoder_states_inputs, [decoder_outputs] + decoder_states)

def decode_sequence(input_seq):
    states_value = encoder_model.predict(input_seq)
    target_seq = np.zeros((1, 1))
    target_seq[0, 0] = tokenizer.word_index['start']

    stop_condition = False
    decoded_sentence = ''
    while not stop_condition:
        output_tokens, h, c = decoder_model.predict([target_seq] + states_value)
        sampled_token_index = np.argmax(output_tokens[0, -1, :])
        sampled_word = None
        for word, index in tokenizer.word_index.items():
            if sampled_token_index == index:
                sampled_word = word
                break

        if sampled_word == 'end' or len(decoded_sentence.split()) > maxlen_answers:
            stop_condition = True
        else:
            decoded_sentence += ' ' + sampled_word

        target_seq = np.zeros((1, 1))
        target_seq[0, 0] = sampled_token_index
        states_value = [h, c]

    return decoded_sentence

# Example of generating a response
for question in questions:
    input_seq = pad_sequences(tokenizer.texts_to_sequences([question]), maxlen=maxlen_questions, padding='post')
    response = decode_sequence(input_seq)
    print(f"Question: {question}")
    print(f"Response: {response}")
