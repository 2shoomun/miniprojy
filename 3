#import library
import numpy as np

class Perceptron:
    """
    A simple perceptron classifier.
    """
    def __init__(self, weights=None, bias=0):
        self.weights = weights
        self.bias = bias

    def initialize(self, n_features):
        """Set initial w and b as zeros if not provided"""
        if self.weights is None:
            self.weights = np.zeros(n_features)
        if self.bias is None:
            self.bias = 0
        return

    def predict(self, inputs):
        """
        Predict the class labels for new input data.
        Calculate the step activation function.
        """
        activation = np.dot(inputs, self.weights) + self.bias
        return 1 if activation > 0 else 0

    def train(self, X, y, epochs=100, learning_rate=0.1):
        """Train the perceptron using the input data and target labels."""
        # Initialize the weights and bias
        self.initialize(X.shape[1])
        for epoch in range(epochs):
            for inputs, label in zip(X, y):
                # Get prediction
                y_pred = self.predict(inputs)
                # Calculate delta error
                error = label - y_pred
                # Update weights and bias
                self.weights += learning_rate * error * inputs
                self.bias += learning_rate * error
        return

# Example usage with customized weights
X_train = np.array([[0, 0, 1], [0, 1, 1], [1, 0, 1], [1, 1, 1]])
y_train = np.array([0, 0, 0, 1])
custom_weights = np.array([0.2, 0.4, 0.6]) # Customized weights
custom_bias = -0.5 # Customized bias

p = Perceptron(weights=custom_weights, bias=custom_bias)
p.train(X_train, y_train, epochs=100, learning_rate=0.1)

# Test prediction
test_input = np.array([0, 1, 1])
print("Prediction:", p.predict(test_input)) # Output: 0

# Evaluate accuracy
X_test = np.array([[0, 0, 1], [0, 1, 1], [1, 0, 1], [1, 1, 1]])
y_test = np.array([0, 0, 0, 1])

# Predict on test data
pred = np.array([p.predict(x) for x in X_test])

# Calculate accuracy
accuracy = np.mean(pred == y_test) * 100
print("Accuracy:", accuracy)
